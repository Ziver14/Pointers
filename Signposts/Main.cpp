#include<iostream>
//Указатели-это переменные, созданные для хранения адресов ячеек оперативной памяти устройства.
//например указатель может хранить адрес переменной.

void my_swap(int num1, int num2) {
	int tmp = num1;
	num1 = num2;
	num2 = tmp;
}

void p_swap(int* pointer1,int* pointer2) {
	int tmp = *pointer1;
	*pointer1 = *pointer2;
	*pointer2 = tmp;
}

void p_sum_arr(int arr[], const int lenght, int* var);

int main() {
	setlocale(LC_ALL, "ru");
	int n,m;
	//Указатели на переменные.
	n = 6;
	std::cout << "n = " << n << std::endl;
	std::cout << "&n = " << &n << std::endl;// Амперстант(&)-это операция обращения к памяти элемента

	int* pn = &n;//создания указателя на переменную n;

	std::cout << "pn = " << pn << std::endl;
	std::cout << "*pn = " << *pn << std::endl;//Разыменование-операция, применяемая к указателям и позволяющаяя обращаться через них к тем
	//участкам памяти, на которые они были направлкны;

	*pn = 15;
	std::cout << "n = " << n << std::endl;
	std::cout << "____________________\n";
	//Указвтель позволяет нам обратиься к переменной памяти,коствено;
	m = 42;
	pn = &m;//Перенаправление указателя на другую область паиятиЭ

	std::cout << "m = " << m << std::endl;
	std::cout << "&m = " << &m << std::endl;
	std::cout << "pn = " << pn << std::endl;
	*pn = 105;
	std::cout << "m = " << m << std::endl;

	int* pm = &m;
	std::cout << "pm = " << pm << std::endl;
	//Размер указателя НЕ ЗАВИСИТ от типа памяти на которую он направлен
	// он зависит от разрядности ОС. Например в Win x64 размер указателя - 64бит(8 байт);
	

	//Указатели и массивы;
	const int size = 5;
	int arr[size]{ 70,80,90,100,110 };

	int* parr = &arr[2];
	std::cout << "*parr = " << *parr << std::endl;
	std::cout << "parr = " << parr << std::endl;
	std::cout << "parr + 1 = " << parr +1 << std::endl;

	//Арифметика указателей - процесс перенаправления указателя на другую область памяти по средствам применения 
	//целочисленных операций сложения и вычитания.
	
	//Ограничения арифметики указателей :
	//1. Нельзя умножать и делить.
	//2. Нельзя применять не целочисленные значения при сдвиге указать.
	//3. Можно вычитать значение одного указателя из другого, но нельзя их складывать.

	parr++; // перенаправление  элемент 100;
	parr -= 2;//перенаправление на элемент 80;

	parr = &arr[0];
	std::cout << "Массив:\n";
	for (int i = 0; i < size; i++)
		std::cout << *(parr + i) << ' ';
	std::cout << std::endl;
	//Массив - это указатель направленный на первый элемент упорядоченной однотипной группы элементов.
	//pointer + n = pointer + n * тип_данных.
	

	//Указатели и функции.
	/*n = 7;
	m = 15;
	std::cout << n << ' ' << m << std::endl;
	//my_swap(n, m);//не работает т.к. параметры это лишь копии аргументов.
	p_swap(&n,&m);
	std::cout << n << ' ' << m << std::endl;
	*/

	//Сумма через указатели.
	const int size1=5;
	int arr1[size1]{ 1,2,3,4,5 };
	int sum;
	std::cout << "Массив\n";
	for (int i = 0; i < size1; i++)
		std::cout << *(arr1 + i) << ' ';
	std::cout << std::endl;

	p_sum_arr(arr1, size1, &sum);
	std::cout << "Сумма элементов: " << sum << "\n\n";
	//Области применения указателей
	//1.Реализации такой технологии как массивы.
	//2.Доступ к элементам расположенным в других блокам программы.
	//3.Обращение к динамической памяти.
	//4.Создание сложных динамических структур данных.
	//5.Реализация  полиморфизма при наследовании классов.

	return 0;
}

void p_sum_arr(int arr[], const int lenght, int* var) {
	*var = 0;
	for (int i = 0; i < lenght; i++)
		*var += *(arr + i);
}